{"version":3,"file":"Sequencer.js","sourceRoot":"","sources":["../lib/Sequencer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs/Rx';\r\nimport { TimeEmission } from './api/Emission';\r\nimport { SegmentType, SegmentConfigShape, GroupParameter, SegmentInterface, SequenceConfigShape } from './api/Segment';\r\nimport { TimeSegment } from './Segments';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SequencerCallback } from './index';\r\n\r\n/**\r\n * Simply a pass-thru function to be used with-in a group functions parentheses.\r\n * \r\n * Adds a single segment (`CountupSegment` or `CountdownSegment`) to a sequence.\r\n * @param ctor    A type being subclass of `TimeSegment`, specifically `CountupSegment` or `CountdownSegment`.\r\n * @param config  Config file specifiying `duration` (required) and `states` (optional).  When used inside a group\r\n * function, the `omitFirst` can be used to omit this segment when its assigned to the first interval.\r\n * @returns       An instance of `T` type, which is a subclass of `TimeSegment`.\r\n */\r\nexport function add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): GroupParameter<T> {\r\n    return { ctor, config };\r\n}\r\n\r\nexport class SegmentCollection {\r\n    private segments: Array<TimeSegment>;\r\n\r\n    constructor(public config: SequenceConfigShape) {\r\n        this.segments = new Array();\r\n    }\r\n\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        const segment: T = new ctor(config);\r\n        segment.collection = this;\r\n        segment.seqConfig = this.config;\r\n        this.segments.push(segment);\r\n\r\n        return segment;\r\n    }\r\n\r\n    group<T extends TimeSegment>(intervals: number = 1, ...segments: GroupParameter<T>[]): T {\r\n        let segment: TimeSegment;\r\n        // TODO: possibly use the 'repeat' operator in here..\r\n        for (let index = 0; index < intervals; index++) {\r\n            segments.forEach((value: GroupParameter<T>) => {\r\n                if ((index != 0) || (!value.config.omitFirst)) {\r\n                    segment = this.add(value.ctor, value.config) as TimeSegment;\r\n                    (segment as TimeSegment).interval = { current: index + 1, total: intervals };\r\n                }\r\n            });\r\n        }\r\n\r\n        // return the last instance, so that this group invocation can be chained if needed...\r\n        return segment! as T;\r\n    }\r\n\r\n    toSequencedObservable(): Observable<TimeEmission> {\r\n        let concatObservs: Observable<TimeEmission> | undefined;\r\n\r\n        this.segments.forEach((value: TimeSegment, index: number) => {\r\n            let observable: Observable<TimeEmission>;\r\n\r\n            if (index === this.segments.length - 1) {\r\n                observable = value.initializeObservable(true);\r\n            } else {\r\n                observable = value.initializeObservable();\r\n            }\r\n\r\n            if (concatObservs) {\r\n                concatObservs = concatObservs.concat(observable);\r\n            } else {\r\n                concatObservs = Observable.concat(observable);\r\n            }\r\n        });\r\n\r\n        return concatObservs!;\r\n    }\r\n\r\n    /** @internal */\r\n    __marauder(): { segments: Array<TimeSegment> } {\r\n        return { segments: this.segments };\r\n    }\r\n}\r\n\r\n/**\r\n * Initiates a sequence with time period being defined in its constructor.\r\n * @param constructor  Sequencer must be instantiated with a value for period that is read in milliseconds.  This \r\n * value becomes static and global to its segments.\r\n */\r\nexport class Sequencer implements SegmentInterface {\r\n    collection: SegmentCollection;\r\n    subscription: Subscription;\r\n    private pauseObserv: Subject<boolean>;\r\n    private source: Observable<TimeEmission>;\r\n    private callback: SequencerCallback;\r\n\r\n    constructor(public config: SequenceConfigShape) {\r\n        this.collection = new SegmentCollection(config);\r\n        this.pauseObserv = new Subject<boolean>();\r\n    }\r\n    /**\r\n     * Adds a single segment (`CountupSegment` or `CountdownSegment`) to a sequence.\r\n     * @param ctor    A type being subclass of `TimeSegment`,  Specifically `CountupSegment` or `CountdownSegment`.\r\n     * @param config  Config file specifiying `duration` (required) and `states` (optional).  When used inside a group\r\n     * function, the `omitFirst` can be used to omit this segment when its assigned to the first interval.\r\n     * @returns       An instance of `T` type, which is a subclass of TimeSegment.\r\n     */\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        return this.collection.add(ctor, config);\r\n    }\r\n\r\n    /**\r\n     * Multiply its combined `add()` invocations and returns a `TimeSegment`.\r\n     * @param intervals The number intervals or cycles to be added of segments.  Must be 1 or greater in value.\r\n     * @param segments  Consists of `add()` invocations returns.\r\n     * @returns         An instance of `T` type, which is a subclass of `TimeSegment`.\r\n     */\r\n    group<T extends TimeSegment>(intervals: number = 1, ...segments: GroupParameter<T>[]): T {\r\n        return this.collection.group(intervals, ...segments);\r\n    }\r\n\r\n    /**\r\n     * Starts internal Observable to start emitting.  This must be called after the `subscribe()` or `subscribeWith()` is called.\r\n     * @returns void.\r\n     */\r\n    start(): void {\r\n        if (this.source) {\r\n            this.pauseObserv.next(true);\r\n        } else {\r\n            throw \"A call to subscribe() or subscribeWith() needs to be made prior to start(), pause() or reset().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pauses internal Observable to start emitting.  This must be called after the `subscribe()` or `subscribeWith()` is called.\r\n     * @returns void.\r\n     */\r\n    pause(): void {\r\n        if (this.source) {\r\n            this.pauseObserv.next(false);\r\n        } else {\r\n            throw \"A call to subscribe() or subscribeWith() needs to be made prior to start(), pause() or reset().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the sequence.  This must be called after the `subscribeWith()` is called since a callback object is needed.\r\n     * That said, this method will unsubscribe and then subscribe again to \"reset\" the sequence.\r\n     * @returns void.\r\n     */\r\n    reset(): void {\r\n        if (this.source && this.callback) {\r\n            this.unsubscribe();\r\n            this.subscribeWith(this.callback);\r\n        } else {\r\n            let mesg: string = \"\";\r\n            if (!this.source) {\r\n                mesg += \"A call to subscribe() or subscribeWith() needs to be made prior to start(), pause() or reset().\";\r\n            }\r\n\r\n            if (!this.callback) {\r\n                mesg += (mesg.length > 0) ? \"  Also, in \" : \"  In \";\r\n                mesg += \"order to reset, a callback instance is needed.  See documentation on subscribeWith().\";\r\n            }\r\n            throw mesg;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an Observable<TimeEmission> object versus a Subscription object which `subscribe()` returns.  Typically `subscribe()`\r\n     * is just used.\r\n     * @returns Observable<TimeEmission>.\r\n     */\r\n\r\n    publish(): Observable<TimeEmission> {\r\n        this.source = this.collection.toSequencedObservable();\r\n\r\n        return Observable.from(this.source)\r\n            .zip(this.pauseObserv.switchMap(\r\n                (value) => (value) ? Observable.interval(this.config.period) : Observable.never<number>()),\r\n            (value: TimeEmission) => value);\r\n    }\r\n\r\n    /**\r\n     * Pass in callback functions to \"subscribe\" to emissions from sots.  See also `subscribeWith()`.\r\n     * \r\n     * @returns Subscription.\r\n     */\r\n    subscribe(next?: (value: TimeEmission) => void, error?: (error: any) => void, complete?: () => void): Subscription {\r\n        this.subscription = this.publish().subscribe(next, error, complete);\r\n        return this.subscription;\r\n    }\r\n\r\n    /**\r\n     * This method primarily serves the same purpose as `subscribe()` and in an addition enables reset method to be \r\n     * callable.\r\n     * \r\n     * @param callback must implement SequencerCallback.\r\n     * @returns Subscription\r\n     */\r\n    subscribeWith(callback: SequencerCallback): Subscription {\r\n        this.callback = callback;\r\n        return this.subscribe(callback.next, callback.error, callback.complete);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe the subscription that is create from `subscribe()` or `subscribeWith()`.  This also calls the `remove()`\r\n     * method.\r\n     */\r\n    unsubscribe(): void {\r\n        this.remove();\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Calls the remove method on the subscription object that was create from `subscribe()` or `subscribeWith()`.\r\n     */\r\n    remove(): void {\r\n        this.subscription.remove(this.subscription);\r\n    }\r\n\r\n    /** @internal */\r\n    __marauder(): { pauser: Subject<boolean>, source: Observable<TimeEmission> } {\r\n        return { pauser: new Subject(), source: this.source! };\r\n    }\r\n}"]}