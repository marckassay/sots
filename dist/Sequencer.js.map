{"version":3,"file":"Sequencer.js","sourceRoot":"","sources":["../lib/Sequencer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs/Rx';\r\nimport { TimeEmission } from './api/Emission';\r\nimport { SegmentType, SegmentConfigShape, GroupParameter, SegmentInterface } from './api/Segment';\r\nimport { TimeSegment } from './Segments';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\n/**\r\n * Simply a pass-thru function to be used in the group function.\r\n * \r\n * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\r\n * @param ctor    A type being subclass of TimeSegment, specifically CountupSegment or CountdownSegment.\r\n * @param config  Config file specifiying duration (required) and states (optional).  When used inside a group\r\n * function, the omitFirst can be used to omit this segment when its assigned to the first interval.\r\n * @returns       An instance of T type, which is a subclass of TimeSegment.\r\n */\r\nexport function add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): GroupParameter<T> {\r\n    return { ctor, config };\r\n}\r\n\r\nexport class SegmentCollection {\r\n    private segments: Array<TimeSegment>;\r\n    private observables: Array<Observable<TimeEmission>>;\r\n\r\n    constructor(public period: number) {\r\n        this.segments = new Array();\r\n        this.observables = new Array();\r\n    }\r\n\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        const segment: T = new ctor(config);\r\n        segment.collection = this;\r\n        segment.period = this.period;\r\n        this.push(segment);\r\n\r\n        return segment;\r\n    }\r\n\r\n    group<T extends TimeSegment>(intervals: number = 1, ...segments: GroupParameter<T>[]): T {\r\n        let segment: TimeSegment;\r\n\r\n        for (let index = 0; index < intervals; index++) {\r\n            segments.forEach((value: GroupParameter<T>) => {\r\n                if ((index != 0) || (!value.config.omitFirst)) {\r\n                    segment = this.add(value.ctor, value.config) as TimeSegment;\r\n                    (segment as TimeSegment).interval = { current: index + 1, total: intervals };\r\n                }\r\n            });\r\n        }\r\n\r\n        // return the last instance, so that this group invocation can be chained if needed...\r\n        return segment! as T;\r\n    }\r\n\r\n    push(segment: TimeSegment): void {\r\n        this.segments.push(segment);\r\n    }\r\n\r\n    initializeObservales(): void {\r\n        this.segments.forEach((value:TimeSegment, index:number) => {\r\n            let observable: Observable<TimeEmission>;\r\n\r\n            if(index === this.segments.length-1) {\r\n                observable = value.initializeObservable(true);\r\n            } else {\r\n                observable = value.initializeObservable();\r\n            }\r\n\r\n            this.observables.push(observable!);\r\n        });\r\n    }\r\n\r\n    toSequencedObservable(): Observable<TimeEmission> {\r\n        this.initializeObservales();\r\n\r\n        const len: number = this.observables.length;\r\n\r\n        if (len >= 1) {\r\n            let source: Observable<TimeEmission> = this.observables[0];\r\n            for (let index = 1; index <= len - 1; index++) {\r\n                source = source.concatMap(() => this.observables[index]);\r\n            }\r\n            return source;\r\n\r\n        } else {\r\n            throw new Error(\"There are no observables to sequence.  Check your configuration.\");\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    __marauder(): { segments: Array<TimeSegment>, observables: any } {\r\n        return { segments: this.segments, observables: this.observables };\r\n    }\r\n}\r\n\r\n/**\r\n * Initiates a sequence with time period being defined in its constructor.\r\n * @param constructor   Sequencer must be instantiated with a value for period that is read in milliseconds.  This value becomes static and global to its segments.\r\n * @returns   an instance.\r\n */\r\nexport class Sequencer implements SegmentInterface {\r\n    period: number;\r\n    collection: SegmentCollection;\r\n    private pauser: Subject<boolean>;\r\n    private publication: Observable<TimeEmission>;\r\n    private source: Observable<TimeEmission>;\r\n\r\n    constructor(config: { period: number }) {\r\n        this.period = config.period;\r\n        this.collection = new SegmentCollection(this.period);\r\n    }\r\n\r\n    /**\r\n     * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\r\n     * @param ctor    A type being subclass of TimeSegment,  Specifically CountupSegment or CountdownSegment.\r\n     * @param config  Config file specifiying duration (required) and states (optional).  When used inside a group\r\n     * function, the omitFirst can be used to omit this segment when its assigned to the first interval.\r\n     * @returns       An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        return this.collection.add(ctor, config);\r\n    }\r\n\r\n    /**\r\n     * Multiply its combined add() invocations and returns a TimeSegment.\r\n     * @param intervals The number intervals or cycles to be added of segments.  Must be 1 or greater in value.\r\n     * @param segments  Consists of add() invocations.\r\n     * @returns         An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    group<T extends TimeSegment>(intervals: number = 1, ...segments: GroupParameter<T>[]): T {\r\n        return this.collection.group(intervals, ...segments);\r\n    }\r\n\r\n    /**\r\n     * Starts internal Observable to start emitting.  This must be called after the 'subscribe()' is called.\r\n     * @returns void.\r\n     */\r\n    start(): void {\r\n        if (this.pauser) {\r\n            this.pauser.next(false);\r\n        } else {\r\n            throw \"A call to subscribe() needs to be made prior to start() or pause() invocation.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pauses internal Observable to start emitting.  This must be called after the 'subscribe()' is called.\r\n     * @returns void.\r\n     */\r\n    pause(): void {\r\n        if (this.pauser) {\r\n            this.pauser.next(true);\r\n        } else {\r\n            throw \"A call to subscribe() needs to be made prior to start() or pause().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an Observable<TimeEmission> versus, subscribe() which returns a Subscription.  Typically subscribe()\r\n     * is used.\r\n     * @returns Observable<TimeEmission>.\r\n     */\r\n    publish(): Observable<TimeEmission> {\r\n        if (!this.source) {\r\n            this.pauser = new Subject<boolean>();\r\n            this.source = this.collection.toSequencedObservable();\r\n            this.pauser.next(true);\r\n            this.publication = this.pauser.switchMap((paused: boolean) => {\r\n                return (paused == true) ? Observable.never<TimeEmission>().materialize() : this.source.materialize();\r\n            }).dematerialize();\r\n        }\r\n\r\n        return this.publication;\r\n    }\r\n\r\n    /**\r\n     * Pass in callback functions to \"subscribe\" to an Observable emitting.  This is the only means of making an \r\n     * observation of emission.\r\n     * \r\n     * @returns Subscription.\r\n     */\r\n    subscribe(next?: (value: TimeEmission) => void, error?: (error: any) => void, complete?: () => void): Subscription {\r\n        return this.publish().subscribe(next, error, complete);\r\n    }\r\n\r\n    /** @internal */\r\n    __marauder(): { pauser: Subject<boolean>, source: Observable<TimeEmission> } {\r\n        return { pauser: this.pauser, source: this.source };\r\n    }\r\n}"]}