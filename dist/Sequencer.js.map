{"version":3,"file":"Sequencer.js","sourceRoot":"","sources":["../lib/Sequencer.ts"],"names":[],"mappings":";;AAAA,8BAA8C;AAK9C,iCAAsC;AACtC,gCAAgC;AAEhC;;;;;;;;GAQG;AACH,aAA2C,IAAoB,EAAE,MAA0B;IACvF,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,MAAM,QAAA,EAAE,CAAC;AAC5B,CAAC;AAFD,kBAEC;AAED;IAGI,2BAAmB,MAA2B;QAA3B,WAAM,GAAN,MAAM,CAAqB;QAC1C,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAE,CAAC;IAChC,CAAC;IAED,+BAAG,GAAH,UAA2B,IAAoB,EAAE,MAA0B;QACvE,IAAM,OAAO,GAAM,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;QAC1B,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE5B,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED,iCAAK,GAAL,UAA6B,SAAqB;QAAlD,iBAcC;QAd4B,0BAAA,EAAA,aAAqB;QAAE,kBAAgC;aAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;YAAhC,iCAAgC;;QAChF,IAAI,OAAoB,CAAC;gCAEhB,KAAK;YACV,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAwB;gBACtC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC5C,OAAO,GAAG,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAgB,CAAC;oBAC3D,OAAuB,CAAC,QAAQ,GAAG,EAAE,OAAO,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;gBACjF,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QARD,qDAAqD;QACrD,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,SAAS,EAAE,KAAK,EAAE;oBAArC,KAAK;SAOb;QAED,sFAAsF;QACtF,MAAM,CAAC,OAAa,CAAC;IACzB,CAAC;IAED,iDAAqB,GAArB;QAAA,iBAoBC;QAnBG,IAAI,aAAmD,CAAC;QAExD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAkB,EAAE,KAAa;YACpD,IAAI,UAAoC,CAAC;YAEzC,EAAE,CAAC,CAAC,KAAK,KAAK,KAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrC,UAAU,GAAG,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,GAAG,KAAK,CAAC,oBAAoB,EAAE,CAAC;YAC9C,CAAC;YAED,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChB,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,aAAa,GAAG,eAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAClD,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,aAAc,CAAC;IAC1B,CAAC;IAED,gBAAgB;IAChB,sCAAU,GAAV;QACI,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC;IACL,wBAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,8CAAiB;AA2D9B,IAAK,aAKJ;AALD,WAAK,aAAa;IACd,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,sCAAqB,CAAA;AACzB,CAAC,EALI,aAAa,KAAb,aAAa,QAKjB;AACD;;;;GAIG;AACH;IAOI,6CAA6C;IAC7C,8CAA8C;IAE9C,mBAAmB,MAA2B;QAA3B,WAAM,GAAN,MAAM,CAAqB;QAmC9C;;;WAGG;QACH,WAAM,GAAY,KAAK,CAAC;QAtCpB,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,GAAG,IAAI,YAAO,EAAW,CAAC;QACrC,IAAI,CAAC,qBAAqB,EAAE,CAAC;IACjC,CAAC;IAEO,yCAAqB,GAA7B;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,qBAAY,EAAE,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,eAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAG,eAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;QAChF,mFAAmF;QACnF,wFAAwF;IAC5F,CAAC;IAED;;;;;;OAMG;IACH,uBAAG,GAAH,UAA2B,IAAoB,EAAE,MAA0B;QACvE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACH,yBAAK,GAAL,UAA6B,SAAqB;QAArB,0BAAA,EAAA,aAAqB;QAAE,kBAAgC;aAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;YAAhC,iCAAgC;;QAChF,MAAM,CAAC,CAAA,KAAA,IAAI,CAAC,UAAU,CAAA,CAAC,KAAK,YAAC,SAAS,SAAK,QAAQ,GAAE;;IACzD,CAAC;IAOD,yBAAK,GAAL;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,gFAAgF,CAAC;QAC3F,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,yBAAK,GAAL;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAExD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,qEAAqE,CAAC;QAChF,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,yBAAK,GAAL;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,qEAAqE,CAAC;QAChF,CAAC;IACL,CAAC;IAQD,2BAAO,GAAP;QAAA,iBAsCC;QArCG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;QACtD,IAAI,CAAC,gBAAgB,CAAC;QACtB,IAAI,CAAC,gBAAgB,CAAC;QAGtB,MAAM,CAAC,eAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAU,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAU,CAAC,KAAK,EAAE,EAAtE,CAAsE,CAAC,EAAE,UAAC,KAAmB,EAAE,KAAa;YACjL,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC,CAAA;YACnC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAA;QACF;;;;;;;;;;;;;;;;;;;;;;;;;;;sBA2Bc;IAClB,CAAC;IAED;;;;;OAKG;IACH,6BAAS,GAAT,UAAU,IAAoC,EAAE,KAA4B,EAAE,QAAqB;QAC/F,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,gBAAgB;IAChB,8BAAU,GAAV;QACI,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,YAAO,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;IAC1D,CAAC;IACL,gBAAC;AAAD,CAAC,AArJD,IAqJC;AArJY,8BAAS","sourcesContent":["import { Observable, Subject } from 'rxjs/Rx';\r\nimport { TimeEmission } from './api/Emission';\r\nimport { SegmentType, SegmentConfigShape, GroupParameter, SegmentInterface, SequenceConfigShape } from './api/Segment';\r\nimport { TimeSegment } from './Segments';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { EventEmitter } from 'events';\r\n//import * as Rx from 'rxjs/Rx';\r\n\r\n/**\r\n * Simply a pass-thru function to be used in the group function.\r\n * \r\n * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\r\n * @param ctor    A type being subclass of TimeSegment, specifically CountupSegment or CountdownSegment.\r\n * @param config  Config file specifiying duration (required) and states (optional).  When used inside a group\r\n * function, the omitFirst can be used to omit this segment when its assigned to the first interval.\r\n * @returns       An instance of T type, which is a subclass of TimeSegment.\r\n */\r\nexport function add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): GroupParameter<T> {\r\n    return { ctor, config };\r\n}\r\n\r\nexport class SegmentCollection {\r\n    private segments: Array<TimeSegment>;\r\n\r\n    constructor(public config: SequenceConfigShape) {\r\n        this.segments = new Array();\r\n    }\r\n\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        const segment: T = new ctor(config);\r\n        segment.collection = this;\r\n        segment.seqConfig = this.config;\r\n        this.segments.push(segment);\r\n\r\n        return segment;\r\n    }\r\n\r\n    group<T extends TimeSegment>(intervals: number = 1, ...segments: GroupParameter<T>[]): T {\r\n        let segment: TimeSegment;\r\n        // TODO: possibly use the 'repeat' operator in here..\r\n        for (let index = 0; index < intervals; index++) {\r\n            segments.forEach((value: GroupParameter<T>) => {\r\n                if ((index != 0) || (!value.config.omitFirst)) {\r\n                    segment = this.add(value.ctor, value.config) as TimeSegment;\r\n                    (segment as TimeSegment).interval = { current: index + 1, total: intervals };\r\n                }\r\n            });\r\n        }\r\n\r\n        // return the last instance, so that this group invocation can be chained if needed...\r\n        return segment! as T;\r\n    }\r\n\r\n    toSequencedObservable(): Observable<TimeEmission> {\r\n        let concatObservs: Observable<TimeEmission> | undefined;\r\n\r\n        this.segments.forEach((value: TimeSegment, index: number) => {\r\n            let observable: Observable<TimeEmission>;\r\n\r\n            if (index === this.segments.length - 1) {\r\n                observable = value.initializeObservable(true);\r\n            } else {\r\n                observable = value.initializeObservable();\r\n            }\r\n\r\n            if (concatObservs) {\r\n                concatObservs = concatObservs.concat(observable);\r\n            } else {\r\n                concatObservs = Observable.concat(observable);\r\n            }\r\n        });\r\n\r\n        return concatObservs!;\r\n    }\r\n\r\n    /** @internal */\r\n    __marauder(): { segments: Array<TimeSegment> } {\r\n        return { segments: this.segments };\r\n    }\r\n}\r\nenum EmitterEvents {\r\n    start = 'start',\r\n    pause = 'pause',\r\n    reset = 'reset',\r\n    complete = 'complete'\r\n}\r\n/**\r\n * Initiates a sequence with time period being defined in its constructor.\r\n * @param constructor   Sequencer must be instantiated with a value for period that is read in milliseconds.  This value becomes static and global to its segments.\r\n * @returns   an instance.\r\n */\r\nexport class Sequencer implements SegmentInterface {\r\n    collection: SegmentCollection;\r\n    private source: Observable<TimeEmission>;\r\n    publication: Observable<TimeEmission>;\r\n    private emitter: EventEmitter;\r\n    private startEventObserv: Observable<boolean>;\r\n    private pauseEventObserv: Observable<{}>;\r\n    //  private resetEventObserv: Observable<{}>;\r\n    // private completeEventObser: Observable<{}>;\r\n\r\n    constructor(public config: SequenceConfigShape) {\r\n        this.collection = new SegmentCollection(config);\r\n        this.pauser = new Subject<boolean>();\r\n        this.initEmitterAndObservs();\r\n    }\r\n\r\n    private initEmitterAndObservs(): void {\r\n        this.emitter = new EventEmitter();\r\n        this.startEventObserv = Observable.fromEvent(this.emitter, EmitterEvents.start);\r\n        this.pauseEventObserv = Observable.fromEvent(this.emitter, EmitterEvents.pause);\r\n        // this.resetEventObserv = Observable.fromEvent(this.emitter, EmitterEvents.reset);\r\n        // this.completeEventObser = Observable.fromEvent(this.emitter, EmitterEvents.complete);\r\n    }\r\n\r\n    /**\r\n     * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\r\n     * @param ctor    A type being subclass of TimeSegment,  Specifically CountupSegment or CountdownSegment.\r\n     * @param config  Config file specifiying duration (required) and states (optional).  When used inside a group\r\n     * function, the omitFirst can be used to omit this segment when its assigned to the first interval.\r\n     * @returns       An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        return this.collection.add(ctor, config);\r\n    }\r\n\r\n    /**\r\n     * Multiply its combined add() invocations and returns a TimeSegment.\r\n     * @param intervals The number intervals or cycles to be added of segments.  Must be 1 or greater in value.\r\n     * @param segments  Consists of add() invocations.\r\n     * @returns         An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    group<T extends TimeSegment>(intervals: number = 1, ...segments: GroupParameter<T>[]): T {\r\n        return this.collection.group(intervals, ...segments);\r\n    }\r\n\r\n    /**\r\n     * Starts internal Observable to start emitting.  This must be called after the 'subscribe()' is called.\r\n     * @returns void.\r\n     */\r\n    status: boolean = false;\r\n    start(): void {\r\n        if (this.source) {\r\n            this.status = true;\r\n            this.pauser.next(true);\r\n\r\n            this.emitter.emit(EmitterEvents.start, this.status);\r\n        } else {\r\n            throw \"A call to subscribe() needs to be made prior to start() or pause() invocation.\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pauses internal Observable to start emitting.  This must be called after the 'subscribe()' is called.\r\n     * @returns void.\r\n     */\r\n    pause(): void {\r\n        if (this.source) {\r\n            this.pauser.next(false);\r\n            this.emitter.emit(EmitterEvents.pause);\r\n            this.status = false;\r\n            this.emitter.emit(EmitterEvents.start, this.status);\r\n\r\n        } else {\r\n            throw \"A call to subscribe() needs to be made prior to start() or pause().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pauses internal Observable to start emitting.  This must be called after the 'subscribe()' is called.\r\n     * @returns void.\r\n     */\r\n    reset(): void {\r\n        if (this.source) {\r\n            this.emitter.emit(EmitterEvents.reset);\r\n        } else {\r\n            throw \"A call to subscribe() needs to be made prior to start() or pause().\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an Observable<TimeEmission> versus, subscribe() which returns a Subscription.  Typically subscribe()\r\n     * is used.\r\n     * @returns Observable<TimeEmission>.\r\n     */\r\n    pauser: Subject<boolean>;\r\n    publish(): Observable<TimeEmission> {\r\n        this.source = this.collection.toSequencedObservable();\r\n        this.startEventObserv;\r\n        this.pauseEventObserv;\r\n\r\n\r\n        return Observable.from(this.source).zip(this.pauser.switchMap((value) => (value) ? Observable.interval(this.config.period) : Observable.never()), (value: TimeEmission, index: number) => {\r\n            console.log(value + \" ## \" + index)\r\n            return value;\r\n        })\r\n        /*\r\n        this.subscribedObservable = Observable.merge(\r\n            this.startEventObserv.switchMap(() =>\r\n                                    Observable.interval(this.config.period, Rx.Scheduler.async).takeUntil(this.pauseEventObserv)\r\n                                  )\r\n                                 .map(() => 1).startWith(0),\r\n            this.resetEventObserv.map(() => 0)\r\n        )\r\n        \r\n                this.subscribedObservable = Observable.merge(\r\n                    this.startEventObserv.switchMap(() =>\r\n                        Observable.interval(this.config.period, Rx.Scheduler.async).takeUntil(this.pauseEventObserv)).map(() => 1).startWith(0),\r\n                    this.resetEventObserv.map(() => 0)\r\n                )\r\n                    .scan((acc: number, value: number, _index: number) => (value === 0 ? 0 : acc + value), 0)\r\n                    .mergeMap((value: number, _index: number) => {\r\n                        return this.source.elementAt(value)\r\n                            .catch((_err, caught: Observable<TimeEmission>) => {\r\n                                // TODO: this is thrown because of out of range on elementAt(). \r\n                                // emitting here serves the purpose, but there must be \r\n                                // a better way of handling this.\r\n                                this.emitter.emit(EmitterEvents.complete);\r\n                                return caught;\r\n                            });\r\n                    })\r\n                    .takeUntil(this.completeEventObser);\r\n                    return this.subscribedObservable;\r\n                    */\r\n    }\r\n\r\n    /**\r\n     * Pass in callback functions to \"subscribe\" to an Observable emitting.  This is the only means of making an \r\n     * observation of emission.\r\n     * \r\n     * @returns Subscription.\r\n     */\r\n    subscribe(next?: (value: TimeEmission) => void, error?: (error: any) => void, complete?: () => void): Subscription {\r\n        return this.publish().subscribe(next, error, complete);\r\n    }\r\n\r\n    /** @internal */\r\n    __marauder(): { pauser: Subject<boolean>, source: Observable<TimeEmission> } {\r\n        return { pauser: new Subject(), source: this.source };\r\n    }\r\n}"]}