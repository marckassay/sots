{"version":3,"file":"Segment.js","sourceRoot":"","sources":["../../lib/api/Segment.ts"],"names":[],"mappings":"","sourcesContent":["import * as state from \"./StateConfigs\";\r\nimport { TimeSegment } from \"../Segments\";\r\n\r\nexport interface SequenceConfigShape {\r\n    period: number;\r\n    compareAsBitwise?: boolean;\r\n}\r\n\r\nexport interface SegmentConfigShape {\r\n    duration: number;\r\n    omitFirst?: boolean;\r\n    compareAsBitwise?: boolean;\r\n    states?: Array<state.StateConfig1 | state.StateConfig2 | state.StateConfig3 | state.StateConfig4 | state.StateConfig5>;\r\n}\r\n\r\nexport interface SegmentInterface {\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T;\r\n    group<T extends TimeSegment>(intervals: number, ...segments: GroupParameter<T>[]): T;\r\n}\r\n\r\n// static-side interface\r\nexport interface SegmentType<T extends TimeSegment> {\r\n    new(config: SegmentConfigShape): T;\r\n}\r\n\r\nexport interface GroupParameter<T extends TimeSegment> {\r\n    ctor: SegmentType<T>;\r\n    config: SegmentConfigShape;\r\n}"]}