{"version":3,"file":"Segment.js","sourceRoot":"","sources":["../../lib/api/Segment.ts"],"names":[],"mappings":"","sourcesContent":["import * as state from \"./StateConfigs\";\nimport { TimeSegment } from \"../Segments\";\n\nexport interface SequenceConfigShape {\n  period: number;\n  compareAsBitwise?: boolean;\n}\n\nexport interface SegmentConfigShape {\n  duration: number;\n  omitFirst?: boolean;\n  compareAsBitwise?: boolean;\n  states?: Array<state.StateConfig1 | state.StateConfig2 | state.StateConfig3 | state.StateConfig4 | state.StateConfig5>;\n}\n\nexport interface SegmentInterface {\n  add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T;\n  group<T extends TimeSegment>(intervals: number, ...segments: GroupParameter<T>[]): T;\n}\n\n// static-side interface\nexport interface SegmentType<T extends TimeSegment> {\n  new(config: SegmentConfigShape): T;\n}\n\nexport interface GroupParameter<T extends TimeSegment> {\n  ctor: SegmentType<T>;\n  config: SegmentConfigShape;\n}\n"]}