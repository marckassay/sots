{"version":3,"file":"Segments.js","sourceRoot":"","sources":["../lib/Segments.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/Rx';\r\nimport { TimeEmission, IntervalEmissionShape, SlotEmissionShape } from './api/Emission';\r\nimport { SegmentType, SegmentConfigShape, GroupParameter, SegmentInterface, SequenceConfigShape } from './api/Segment';\r\nimport { StateConfig1, StateConfig2, StateConfig3, StateConfig4, StateConfig5 } from './api/StateConfigs';\r\nimport { SegmentCollection } from './Sequencer';\r\n\r\nexport class TimeSegment implements SegmentInterface {\r\n    seqConfig: SequenceConfigShape;\r\n    interval: IntervalEmissionShape;\r\n    collection: SegmentCollection;\r\n    config: SegmentConfigShape;\r\n    stateExp: StateExpression;\r\n    countingUp: boolean;\r\n\r\n    constructor(config: SegmentConfigShape, countingUp: boolean = false) {\r\n        this.config = config;\r\n        this.countingUp = countingUp;\r\n    }\r\n\r\n    public initializeObservable(lastElement: boolean = false): Observable<TimeEmission> {\r\n        this.stateExp = new StateExpression(this.config, this.seqConfig, this.countingUp);\r\n        let totalElements: number = this.config.duration / this.seqConfig.period;\r\n        let source: Observable<TimeEmission> = Observable.range(0, totalElements)\r\n            .map((_value: number, index: number): TimeEmission => {\r\n                let nuindex: number;\r\n                if (!this.countingUp) {\r\n                    nuindex = (this.config.duration - (this.seqConfig.period * index)) * .001;\r\n                } else {\r\n                    nuindex = (this.seqConfig.period * index) * .001;\r\n                }\r\n\r\n                nuindex = parseFloat(nuindex.toFixed(3));\r\n\r\n                let slot: SlotEmissionShape | undefined = this.stateExp.checkForSlot(nuindex);\r\n\r\n                return { time: nuindex, interval: this.interval, state: slot };\r\n            })\r\n            .takeWhile((value: TimeEmission) => {\r\n                if (lastElement == false) {\r\n                    if (!this.countingUp) {\r\n                        return value.time > 0;\r\n                    } else {\r\n                        return value.time < (this.config.duration * .001);\r\n                    }\r\n                } else {\r\n                    if (!this.countingUp) {\r\n                        return !(value.time === 0);\r\n                    } else {\r\n                        return !(value.time === (this.config.duration * .001));\r\n                    }\r\n                }\r\n            });\r\n\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\r\n     * @param ctor    A type being subclass of TimeSegment,  Specifically CountupSegment or CountdownSegment.\r\n     * @param config  Config file specifiying duration (required) and states (optional).  When used inside a group\r\n     * function, the omitFirst can be used to omit this segment when its assigned to the first interval.\r\n     * @returns       An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        return this.collection.add(ctor, config);\r\n    }\r\n\r\n    /**\r\n     * Multiply its combined add() invocations and returns a TimeSegment.\r\n     * @param intervals The number intervals or cycles to be added of segments.  Must be 1 or greater in value.\r\n     * @param segments  Consists of add() invocations.\r\n     * @returns         An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    group<T extends TimeSegment>(intervals: number, ...segments: GroupParameter<T>[]): T {\r\n        return this.collection.group(intervals, ...segments);\r\n    }\r\n}\r\n\r\n/**\r\n * Counts down in time.  In otherwords, its descending time.\r\n */\r\nexport class CountdownSegment extends TimeSegment {\r\n    constructor(public config: SegmentConfigShape) {\r\n        super(config, false);\r\n    }\r\n}\r\n\r\n/**\r\n * Counts up in time.  In otherwords, its ascending time.\r\n */\r\nexport class CountupSegment extends TimeSegment {\r\n    constructor(public config: SegmentConfigShape) {\r\n        super(config, true);\r\n    }\r\n}\r\n\r\nexport class StateExpression {\r\n    static applySpread: string = \"::ON\";\r\n    static removeSpread: string = \"::OFF\";\r\n    static spread_regex: RegExp = /(\\w+)(?:\\:{2})/g;\r\n\r\n    private timemap: Map<number, SlotEmissionShape>;\r\n\r\n    constructor(config: SegmentConfigShape, public seqConfig: SequenceConfigShape, public countingUp: boolean) {\r\n        this.timemap = new Map<number, SlotEmissionShape>();\r\n        this.parse(config);\r\n        this.applySpreading();\r\n    }\r\n\r\n    private parse(config: SegmentConfigShape): void {\r\n\r\n        if (config.states) {\r\n            let statetime: Array<StateConfig1 | StateConfig2 | StateConfig3 | StateConfig4 | StateConfig5> = config.states;\r\n            const len: number = statetime.length;\r\n\r\n            for (let index = 0; index < len; index++) {\r\n                for (let property in statetime[index]) {\r\n                    let state: string | number = statetime[index].state;\r\n                    switch (property) {\r\n                        case \"timeAt\":\r\n                            this.setInstantStates((statetime[index] as StateConfig1).timeAt, state);\r\n                            break;\r\n\r\n                        case \"timeLessThan\":\r\n                            let time2: number = parseFloat((statetime[index] as StateConfig2).timeLessThan) - this.seqConfig.period;\r\n                            this.setSpreadState(\"lessThan\", time2, state);\r\n                            break;\r\n\r\n                        case \"timeLessThanOrEqualTo\":\r\n                            let time3: number = parseFloat((statetime[index] as StateConfig3).timeLessThanOrEqualTo);\r\n                            this.setSpreadState(\"lessThan\", time3, state);\r\n                            break;\r\n\r\n                        case \"timeGreaterThan\":\r\n                            let time4: number = parseFloat((statetime[index] as StateConfig4).timeGreaterThan) + this.seqConfig.period;\r\n                            this.setSpreadState(\"greaterThan\", time4, state);\r\n                            break;\r\n\r\n                        case \"timeGreaterThanOrEqualTo\":\r\n                            let time5: number = parseFloat((statetime[index] as StateConfig5).timeGreaterThanOrEqualTo);\r\n                            this.setSpreadState(\"greaterThan\", time5, state);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private applySpreading(): void {\r\n        const pointerTimeMap: Array<Array<number | SlotEmissionShape>> = Array.from(this.timemap).sort((a: [number, SlotEmissionShape], b: [number, SlotEmissionShape]) => {\r\n            if (!this.countingUp) {\r\n                return b[0] - a[0];\r\n            } else {\r\n                return a[0] - b[0];\r\n            }\r\n        });\r\n\r\n        const firstSpreadIndex: number = pointerTimeMap.findIndex((value: Array<number | SlotEmissionShape>) => {\r\n            return (value[1] as SlotEmissionShape).spread.length > 0;\r\n        });\r\n\r\n        const factor: number = parseFloat((1000 / this.seqConfig.period).toFixed(1));\r\n        const timeforEachElement: number = parseFloat((this.seqConfig.period * .001).toFixed(1));\r\n\r\n        //if (!this.countingUp) {\r\n        for (var i: number = firstSpreadIndex; i < pointerTimeMap.length; i++) {\r\n            const pointerElement: Array<number | SlotEmissionShape> = pointerTimeMap[i];\r\n            const pointerElementIndex: number = (pointerElement[0] as number);\r\n            const nextPointerElement: Array<number | SlotEmissionShape> = pointerTimeMap[i + 1];\r\n            let timeInBetween: number;\r\n            if (nextPointerElement) {\r\n                timeInBetween = pointerElementIndex - (nextPointerElement[0] as number);\r\n            } else {\r\n                timeInBetween = pointerElementIndex;\r\n            }\r\n\r\n            const numberOfElementsNeeded: number = timeInBetween * factor;\r\n            const spreadFill: (string | number)[] = (pointerElement[1] as SlotEmissionShape).spread;\r\n            const spreadFillSlot: SlotEmissionShape = this.newSlot([], spreadFill);\r\n\r\n            for (let j: number = 1; j <= numberOfElementsNeeded; j++) {\r\n                const nuIndex: number = parseFloat((pointerElementIndex - (timeforEachElement * j)).toFixed(1));\r\n\r\n                if (j !== numberOfElementsNeeded) {\r\n                    this.timemap.set(nuIndex, spreadFillSlot);\r\n                } else {\r\n                    if (this.timemap.has(nuIndex)) {\r\n                        const el: SlotEmissionShape = this.timemap.get(nuIndex)!;\r\n                        el.spread = el.spread.concat(spreadFillSlot.spread);\r\n                        this.timemap.set(nuIndex, el);\r\n                    } else {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //}\r\n    }\r\n\r\n    private setInstantStates(times: string, state: string | number): void {\r\n        const time_expression: RegExp = /(\\d+)/g;\r\n\r\n        let results: RegExpMatchArray | null = times.match(time_expression);\r\n        if (results) {\r\n            results.map((value: string) => {\r\n                const time: number = parseFloat(value);\r\n                if (!this.timemap.has(time)) {\r\n                    this.timemap.set(time, this.newSlot([state]));\r\n                } else {\r\n                    this.timemap.get(time)!.instant.push(state);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setSpreadState(_operation: \"lessThan\" | \"greaterThan\", time: number, state: string | number): void {\r\n        if (!this.timemap.has(time)) {\r\n            this.timemap.set(time, this.newSlot([], [state]));\r\n        } else {\r\n            this.timemap.get(time)!.spread.push(state);\r\n        }\r\n\r\n        // TODO: currently when spreads are appiled, it will exists to the \r\n        // end of its segment. StateExpression.spread_off may need to be \r\n        // used for some purposes, if so modification (at minimum) here \r\n        // will be needed.\r\n        /*\r\n        const polarend: number = (operation == 'lessThan') ? 0 : Number.MAX_VALUE;\r\n        if (!this.timemap[polarend]) {\r\n            // this.timemap[polarend] = state + StateExpression.spread_off;\r\n        } else {\r\n            // this.timemap[polarend] += \",\" + state + StateExpression.spread_off;\r\n        }\r\n        */\r\n    }\r\n\r\n    checkForSlot(time: number): SlotEmissionShape | undefined {\r\n        return this.timemap.get(time);\r\n    }\r\n\r\n    newSlot(instant: Array<string | number> = [], spread: Array<string | number> = []): SlotEmissionShape {\r\n        return {\r\n            instant: instant,\r\n            spread: spread,\r\n            valueOf: (state?: string | number, compareAsBitwise?: boolean): boolean | number => {\r\n                let results: boolean | number;\r\n                if (state !== undefined) {\r\n                    results = (this.getStateValues(instant, spread, state, compareAsBitwise) >= 0);\r\n                } else {\r\n                    results = this.getStateValues(instant, spread, -1, true);\r\n                }\r\n\r\n                return results;\r\n            }\r\n        } as SlotEmissionShape;\r\n    }\r\n\r\n    private getStateValues(instant: Array<string | number>, spread: Array<string | number>, state: string | number, compareAsBitwise?: boolean): number {\r\n\r\n        let useBitwiseCompare: boolean;\r\n        if (compareAsBitwise != undefined) {\r\n            useBitwiseCompare = compareAsBitwise;\r\n        }\r\n        else if (this.seqConfig.compareAsBitwise != undefined) {\r\n            useBitwiseCompare = this.seqConfig.compareAsBitwise;\r\n        }\r\n        else {\r\n            useBitwiseCompare = false;\r\n        }\r\n\r\n        if (useBitwiseCompare === false) {\r\n            if (instant.indexOf(state) === -1) {\r\n                return spread.indexOf(state);\r\n            } else {\r\n                return 1;\r\n            }\r\n        } else if (typeof state === 'string') {\r\n            throw \"valueOf() has been called with a string and flagged to use bitwise comparisons.\"\r\n        } else {\r\n            let total: number = 0;\r\n            instant.forEach((value: string | number) => {\r\n                if (typeof value === 'number') {\r\n                    total += value;\r\n                }\r\n            }, total);\r\n\r\n            spread.forEach((value: string | number) => {\r\n                if (typeof value === 'number') {\r\n                    total += value;\r\n                }\r\n            }, total);\r\n\r\n            if (state === -1) {\r\n                return total;\r\n            } else {\r\n                return ((total & state) === state) ? 1 : -1;\r\n            }\r\n        }\r\n    }\r\n}"]}