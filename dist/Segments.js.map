{"version":3,"file":"Segments.js","sourceRoot":"","sources":["../lib/Segments.ts"],"names":[],"mappings":"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","sourcesContent":["import { never, Observable, Subject, timer } from 'rxjs';\nimport { map, startWith, switchMap, takeWhile } from 'rxjs/operators';\nimport { IntervalEmission, TimeEmission } from './api/Emission';\nimport { GroupParameter, SegmentConfigShape, SegmentInterface, SegmentType, SequenceConfigShape } from './api/Segment';\nimport { StateConfig1, StateConfig2, StateConfig3, StateConfig4, StateConfig5 } from './api/StateConfigs';\nimport { SegmentCollection } from './Sequencer';\nimport { StateEmission } from './StateEmission';\n\nexport class TimeSegment implements SegmentInterface {\n  config: SegmentConfigShape;\n  seqConfig: SequenceConfigShape;\n  pauseObserv: Subject<boolean>;\n  collection: SegmentCollection;\n  interval: IntervalEmission;\n  private countingUp: boolean;\n  private stateExp: StateExpression;\n\n\n  constructor(config: SegmentConfigShape, countingUp: boolean = false) {\n    this.config = config;\n    this.countingUp = countingUp;\n  }\n\n  public initializeObservable(firstElementOfSeq: boolean = false, lastElementOfSeq: boolean = false): Observable<TimeEmission> {\n    this.stateExp = new StateExpression(this.config, this.seqConfig, this.countingUp);\n\n    let source: Observable<TimeEmission> = this.pauseObserv.pipe(\n      startWith(!firstElementOfSeq),\n      switchMap((value) => (value) ? timer(0, this.seqConfig.period) : never()),\n      map((_value: number, index: number): TimeEmission => {\n        let time: number;\n        if (!this.countingUp) {\n          time = (this.config.duration - (this.seqConfig.period * index)) * .001;\n        } else {\n          time = (this.seqConfig.period * index) * .001;\n        }\n        time = parseFloat(time.toFixed(3));\n\n        return { time: time, interval: this.interval, state: this.stateExp.getStateEmission(time) };\n      }),\n      takeWhile((value: TimeEmission) => {\n        if (lastElementOfSeq == false) {\n          if (!this.countingUp) {\n            return value.time > 0;\n          } else {\n            return value.time < (this.config.duration * .001);\n          }\n        } else {\n          if (!this.countingUp) {\n            return !(value.time === 0);\n          } else {\n            return !(value.time === (this.config.duration * .001));\n          }\n        }\n      })\n    )\n\n    return source;\n  }\n\n  /**\n   * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\n   * @param ctor    A type being subclass of TimeSegment,  Specifically CountupSegment or\n   * CountdownSegment.\n   * @param config  Config file specifiying duration (required) and states (optional).  When used\n   * inside a group function, the omitFirst can be used to omit this segment when its assigned to\n   * the first interval.\n   * @returns       An instance of T type, which is a subclass of TimeSegment.\n   */\n  add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\n    return this.collection.add(ctor, config);\n  }\n\n  /**\n   * Multiply its combined add() invocations and returns a TimeSegment.\n   * @param intervals The number intervals or cycles to be added of segments.  Must be 1 or greater\n   * in value.\n   * @param segments  Consists of add() invocations.\n   * @returns         An instance of T type, which is a subclass of TimeSegment.\n   */\n  group<T extends TimeSegment>(intervals: number, ...segments: GroupParameter<T>[]): T {\n    return this.collection.group(intervals, ...segments);\n  }\n}\n\n/**\n * Counts down in time.  In otherwords, its descending time.\n */\nexport class CountdownSegment extends TimeSegment {\n  constructor(public config: SegmentConfigShape) {\n    super(config, false);\n  }\n}\n\n/**\n * Counts up in time.  In otherwords, its ascending time.\n */\nexport class CountupSegment extends TimeSegment {\n  constructor(public config: SegmentConfigShape) {\n    super(config, true);\n  }\n}\n\nexport class StateExpression {\n  // holds instant and spread states that the user defined.\n  private instantEmissions: Map<number, StateEmission>;\n  // when a state is \"spread\", this map accumalates such emissions\n  // until segment terminates.\n  private spreadEmissions: Map<number, StateEmission>;\n  // this map simply holds all mod states of the segment.  this will\n  // need to be check every time the seq emits.\n  private moduloInstantEmissions: Map<number, string | number>;\n\n  constructor(public config: SegmentConfigShape, public seqConfig: SequenceConfigShape, public countingUp: boolean) {\n    this.instantEmissions = new Map<number, StateEmission>();\n    this.spreadEmissions = new Map<number, StateEmission>();\n    this.moduloInstantEmissions = new Map<number, string | number>();\n\n    this.parse(config);\n  }\n\n  private parse(config: SegmentConfigShape): void {\n    if (config.states) {\n      const states: Array<StateConfig1 | StateConfig2 | StateConfig3 | StateConfig4 | StateConfig5> = config.states;\n      const statesLength: number = states.length;\n\n      for (let index = 0; index < statesLength; index++) {\n        for (let property in states[index]) {\n          let state: string | number = states[index].state;\n          switch (property) {\n            case \"timeAt\":\n              this.setInstantStates((states[index] as StateConfig1).timeAt, state);\n              break;\n\n            case \"timeLessThan\":\n              let time2: number = parseFloat((states[index] as StateConfig2).timeLessThan) - (this.seqConfig.period * .001);\n              this.setSpreadState(time2, state);\n              break;\n\n            case \"timeLessThanOrEqualTo\":\n              let time3: number = parseFloat((states[index] as StateConfig3).timeLessThanOrEqualTo);\n              this.setSpreadState(time3, state);\n              break;\n\n            case \"timeGreaterThan\":\n              let time4: number = parseFloat((states[index] as StateConfig4).timeGreaterThan) + (this.seqConfig.period * .001);\n              this.setSpreadState(time4, state);\n              break;\n\n            case \"timeGreaterThanOrEqualTo\":\n              let time5: number = parseFloat((states[index] as StateConfig5).timeGreaterThanOrEqualTo);\n              this.setSpreadState(time5, state);\n              break;\n          }\n        }\n      }\n    }\n  }\n\n  private setInstantStates(times: string, state: string | number): void {\n    const excludeCommaExpression: RegExp = /[^,]+/g;\n    const moduloExpression: RegExp = /(mod\\s*|%\\s*)\\d+/;\n    let results: RegExpMatchArray | null = times.match(excludeCommaExpression);\n\n    let insertInstantState = (value: number): void => {\n      if (!this.instantEmissions.has(value)) {\n        this.instantEmissions.set(value, new StateEmission(this.seqConfig.compareAsBitwise, new Set([state])));\n      } else {\n        this.instantEmissions.get(value)!.instant.add(state);\n      }\n    };\n\n    if (results) {\n      results.map((value: string) => {\n        if (value.search(moduloExpression) == -1) {\n          const time: number = parseFloat(value);\n          insertInstantState(time);\n        } else {\n          const modTime: number = parseInt(value.match(/\\d+/)![0]);\n\n          if (!this.moduloInstantEmissions.has(modTime)) {\n            this.moduloInstantEmissions.set(modTime, state);\n          } else {\n            const currentValue: string | number = this.moduloInstantEmissions.get(modTime)!;\n            this.moduloInstantEmissions.set(modTime, currentValue + ',' + state);\n          }\n        }\n      });\n    }\n  }\n\n  private setSpreadState(time: number, state: string | number): void {\n    if (!this.spreadEmissions.has(time)) {\n      this.spreadEmissions.set(time, new StateEmission(this.seqConfig.compareAsBitwise, undefined, new Set([state])));\n    } else {\n      this.spreadEmissions.get(time)!.spread.add(state);\n    }\n  }\n\n  getStateEmission(time: number): StateEmission | undefined {\n    let emissions: StateEmission | undefined;\n    emissions = this.instantEmissions.get(time);\n\n    // determine if any moduloInstantEmissions apply to this moment in time\n    this.moduloInstantEmissions.forEach((value: string | number, key: number): void => {\n      ///const timeFloat: number = (typeof value === 'string') ? parseFloat(value) : value;\n      if (time % key === 0) {\n        if (!emissions) {\n          emissions = new StateEmission(this.seqConfig.compareAsBitwise, new Set([value]));\n        } else {\n          emissions.instant.add(value);\n        }\n      }\n    });\n\n    // get keys greater-equal or lesser-equal in value of time, then add to emissions\n    this.spreadEmissions.forEach((value: StateEmission, key: number): void => {\n      if ((!this.countingUp) ? key >= time : key <= time) {\n        if (!emissions) {\n          emissions = new StateEmission(this.seqConfig.compareAsBitwise, undefined, value.spread);\n        } else {\n          emissions.mapToSpread(value.spread);\n        }\n      }\n    });\n\n    return emissions;\n  }\n}\n"]}