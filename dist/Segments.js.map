{"version":3,"file":"Segments.js","sourceRoot":"","sources":["../lib/Segments.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/Rx';\r\nimport { TimeEmission, IntervalEmissionShape, SlotEmissionShape, TimeSlot } from './api/Emission';\r\nimport { SegmentType, SegmentConfigShape, GroupParameter, SegmentInterface } from './api/Segment';\r\nimport { StateConfig1, StateConfig2, StateConfig3, StateConfig4, StateConfig5 } from './api/StateConfigs';\r\nimport { SegmentCollection } from './Sequencer';\r\n\r\nexport class TimeSegment implements SegmentInterface {\r\n    period: number;\r\n    interval: IntervalEmissionShape;\r\n    collection: SegmentCollection;\r\n    protected config: SegmentConfigShape;\r\n    private stateexp: StateExpression;\r\n    private countingUp: boolean;\r\n    private previousspread: string[];\r\n\r\n    constructor(config: SegmentConfigShape, countingUp: boolean = false) {\r\n        this.config = config;\r\n        this.countingUp = countingUp;\r\n    }\r\n\r\n    public initializeObservable(lastElement: boolean = false) {\r\n        this.stateexp = new StateExpression(this.config, this.period);\r\n        let source: Observable<TimeEmission> = Observable.timer(0, this.period)\r\n            .map((index: number): TimeEmission => {\r\n                let nuindex: number;\r\n                if (!this.countingUp) {\r\n                    nuindex = (this.config.duration - (this.period * index)) * .001;\r\n                } else {\r\n                    nuindex = (this.period * index) * .001;\r\n                }\r\n\r\n                nuindex = Number(nuindex.toFixed(3));\r\n\r\n                let states: SlotEmissionShape | undefined = this.stateexp.evaluate(nuindex);\r\n                if (this.previousspread && states && states.spread) {\r\n                    states.spread = states.spread.concat(this.previousspread);\r\n                } else if (this.previousspread && !states) {\r\n                    states = { instant: [], spread: this.previousspread };\r\n                } else if (states && states.spread.length > 0) {\r\n                    this.previousspread = states.spread;\r\n                }\r\n\r\n                return { time: nuindex, state: states, interval: this.interval };\r\n            }).takeWhile((value: TimeEmission) => {\r\n                if (lastElement == false) {\r\n                    if (!this.countingUp) {\r\n                        return value.time > 0;\r\n                    } else {\r\n                        return value.time < (this.config.duration * .001);\r\n                    }\r\n                } else {\r\n                    if (!this.countingUp) {\r\n                        return !(value.time === 0);\r\n                    } else {\r\n                        return !(value.time === (this.config.duration * .001));\r\n                    }\r\n                }\r\n            });\r\n\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Adds a single segment (CountupSegment or CountdownSegment) to a sequence.\r\n     * @param ctor    A type being subclass of TimeSegment,  Specifically CountupSegment or CountdownSegment.\r\n     * @param config  Config file specifiying duration (required) and states (optional).  When used inside a group\r\n     * function, the omitFirst can be used to omit this segment when its assigned to the first interval.\r\n     * @returns       An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    add<T extends TimeSegment>(ctor: SegmentType<T>, config: SegmentConfigShape): T {\r\n        return this.collection.add(ctor, config);\r\n    }\r\n\r\n    /**\r\n     * Multiply its combined add() invocations and returns a TimeSegment.\r\n     * @param intervals The number intervals or cycles to be added of segments.  Must be 1 or greater in value.\r\n     * @param segments  Consists of add() invocations.\r\n     * @returns         An instance of T type, which is a subclass of TimeSegment.\r\n     */\r\n    group<T extends TimeSegment>(intervals: number, ...segments: GroupParameter<T>[]): T {\r\n        return this.collection.group(intervals, ...segments);\r\n    }\r\n}\r\n\r\n/**\r\n * Counts down in time.  In otherwords, its descending time.\r\n */\r\nexport class CountdownSegment extends TimeSegment {\r\n    constructor(public config: SegmentConfigShape) {\r\n        super(config, false);\r\n    }\r\n}\r\n\r\n/**\r\n * Counts up in time.  In otherwords, its ascending time.\r\n */\r\nexport class CountupSegment extends TimeSegment {\r\n    constructor(public config: SegmentConfigShape) {\r\n        super(config, true);\r\n    }\r\n}\r\n\r\nexport class StateExpression {\r\n    static spread_on: string = \"::ON\";\r\n    static spread_off: string = \"::OFF\";\r\n    static spread_regex: RegExp = /(\\w+)(?:\\:{2})/g;\r\n\r\n    private timemap: TimeSlot<SlotEmissionShape> = {};\r\n\r\n    constructor(config: SegmentConfigShape, public period: number) {\r\n        this.parse(config);\r\n    }\r\n\r\n    private parse(config: SegmentConfigShape): void {\r\n\r\n        if (config.states) {\r\n            let statetime: Array<StateConfig1 | StateConfig2 | StateConfig3 | StateConfig4 | StateConfig5> = config.states;\r\n            const len: number = statetime.length;\r\n\r\n            for (let index = 0; index < len; index++) {\r\n                for (let property in statetime[index]) {\r\n                    let state: string = statetime[index].state;\r\n                    switch (property) {\r\n                        case \"timeAt\":\r\n                            this.setInstantStates((statetime[index] as StateConfig1).timeAt, state);\r\n                            break;\r\n\r\n                        case \"timeLessThan\":\r\n                            let time2: number = Number((statetime[index] as StateConfig2).timeLessThan) - this.period;\r\n                            this.setSpreadState(\"lessThan\", time2, state);\r\n                            break;\r\n\r\n                        case \"timeLessThanOrEqualTo\":\r\n                            let time3: number = Number((statetime[index] as StateConfig3).timeLessThanOrEqualTo);\r\n                            this.setSpreadState(\"lessThan\", time3, state);\r\n                            break;\r\n\r\n                        case \"timeGreaterThan\":\r\n                            let time4: number = Number((statetime[index] as StateConfig4).timeGreaterThan) + this.period;\r\n                            this.setSpreadState(\"greaterThan\", time4, state);\r\n                            break;\r\n\r\n                        case \"timeGreaterThanOrEqualTo\":\r\n                            let time5: number = Number((statetime[index] as StateConfig5).timeGreaterThanOrEqualTo);\r\n                            this.setSpreadState(\"greaterThan\", time5, state);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setInstantStates(times: string, state: string): void {\r\n        const time_expression: RegExp = /(\\d+)/g;\r\n\r\n        let results: RegExpMatchArray | null = times.match(time_expression);\r\n        if (results) {\r\n            results.map((value: string) => {\r\n                let timeslot: SlotEmissionShape = this.timemap[Number(value)];\r\n                if (!timeslot) {\r\n                    this.timemap[Number(value)] = { instant: [state], spread: [] };\r\n                } else if (timeslot.instant) {\r\n                    timeslot.instant.push(state);\r\n                    this.timemap[Number(value)] = timeslot;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setSpreadState(operation: \"lessThan\" | \"greaterThan\", time: number, state: string): void {\r\n        const timeslot: SlotEmissionShape = this.timemap[time];\r\n        if (!timeslot) {\r\n            this.timemap[time] = { instant: [], spread: [state] };\r\n        } else if (timeslot.spread) {\r\n            timeslot.spread.push(state);\r\n            this.timemap[time] = timeslot;\r\n        }\r\n\r\n        // TODO: StateExpression.spread_off isnt being searched for at any moment.\r\n        const polarend: number = (operation == 'lessThan') ? 0 : Number.MAX_VALUE;\r\n        if (!this.timemap[polarend]) {\r\n            // this.timemap[polarend] = state + StateExpression.spread_off;\r\n        } else {\r\n            // this.timemap[polarend] += \",\" + state + StateExpression.spread_off;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param time The time for this segment.  This is not global time of a sequence.\r\n     */\r\n    evaluate(time: number): SlotEmissionShape | undefined {\r\n        return this.timemap[time];\r\n    }\r\n}"]}